// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: bouncer.proto

package bouncer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login    string `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Ip       string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *AuthRequest) Reset() {
	*x = AuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bouncer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRequest) ProtoMessage() {}

func (x *AuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bouncer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRequest.ProtoReflect.Descriptor instead.
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return file_bouncer_proto_rawDescGZIP(), []int{0}
}

func (x *AuthRequest) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *AuthRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AuthRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type AuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *AuthResponse) Reset() {
	*x = AuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bouncer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthResponse) ProtoMessage() {}

func (x *AuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bouncer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthResponse.ProtoReflect.Descriptor instead.
func (*AuthResponse) Descriptor() ([]byte, []int) {
	return file_bouncer_proto_rawDescGZIP(), []int{1}
}

func (x *AuthResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type DropBucketParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login string `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Ip    string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *DropBucketParams) Reset() {
	*x = DropBucketParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bouncer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropBucketParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropBucketParams) ProtoMessage() {}

func (x *DropBucketParams) ProtoReflect() protoreflect.Message {
	mi := &file_bouncer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropBucketParams.ProtoReflect.Descriptor instead.
func (*DropBucketParams) Descriptor() ([]byte, []int) {
	return file_bouncer_proto_rawDescGZIP(), []int{2}
}

func (x *DropBucketParams) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *DropBucketParams) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet string `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bouncer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_bouncer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_bouncer_proto_rawDescGZIP(), []int{3}
}

func (x *Subnet) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

var File_bouncer_proto protoreflect.FileDescriptor

var file_bouncer_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x1e, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x38, 0x0a, 0x10, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x22, 0x20, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x32, 0xfe, 0x02, 0x0a, 0x07, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x2e, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x62,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x39, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x0f, 0x2e, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0c, 0x41, 0x64,
	0x64, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bouncer_proto_rawDescOnce sync.Once
	file_bouncer_proto_rawDescData = file_bouncer_proto_rawDesc
)

func file_bouncer_proto_rawDescGZIP() []byte {
	file_bouncer_proto_rawDescOnce.Do(func() {
		file_bouncer_proto_rawDescData = protoimpl.X.CompressGZIP(file_bouncer_proto_rawDescData)
	})
	return file_bouncer_proto_rawDescData
}

var file_bouncer_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_bouncer_proto_goTypes = []interface{}{
	(*AuthRequest)(nil),      // 0: bouncer.AuthRequest
	(*AuthResponse)(nil),     // 1: bouncer.AuthResponse
	(*DropBucketParams)(nil), // 2: bouncer.DropBucketParams
	(*Subnet)(nil),           // 3: bouncer.Subnet
	(*emptypb.Empty)(nil),    // 4: google.protobuf.Empty
}
var file_bouncer_proto_depIdxs = []int32{
	0, // 0: bouncer.Bouncer.Authorization:input_type -> bouncer.AuthRequest
	2, // 1: bouncer.Bouncer.DropBucket:input_type -> bouncer.DropBucketParams
	3, // 2: bouncer.Bouncer.AddBlackList:input_type -> bouncer.Subnet
	3, // 3: bouncer.Bouncer.RemoveBlackList:input_type -> bouncer.Subnet
	3, // 4: bouncer.Bouncer.AddWhiteList:input_type -> bouncer.Subnet
	3, // 5: bouncer.Bouncer.RemoveWhiteList:input_type -> bouncer.Subnet
	1, // 6: bouncer.Bouncer.Authorization:output_type -> bouncer.AuthResponse
	4, // 7: bouncer.Bouncer.DropBucket:output_type -> google.protobuf.Empty
	4, // 8: bouncer.Bouncer.AddBlackList:output_type -> google.protobuf.Empty
	4, // 9: bouncer.Bouncer.RemoveBlackList:output_type -> google.protobuf.Empty
	4, // 10: bouncer.Bouncer.AddWhiteList:output_type -> google.protobuf.Empty
	4, // 11: bouncer.Bouncer.RemoveWhiteList:output_type -> google.protobuf.Empty
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_bouncer_proto_init() }
func file_bouncer_proto_init() {
	if File_bouncer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bouncer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bouncer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bouncer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropBucketParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bouncer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bouncer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bouncer_proto_goTypes,
		DependencyIndexes: file_bouncer_proto_depIdxs,
		MessageInfos:      file_bouncer_proto_msgTypes,
	}.Build()
	File_bouncer_proto = out.File
	file_bouncer_proto_rawDesc = nil
	file_bouncer_proto_goTypes = nil
	file_bouncer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BouncerClient is the client API for Bouncer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BouncerClient interface {
	Authorization(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	DropBucket(ctx context.Context, in *DropBucketParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddBlackList(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveBlackList(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddWhiteList(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveWhiteList(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bouncerClient struct {
	cc grpc.ClientConnInterface
}

func NewBouncerClient(cc grpc.ClientConnInterface) BouncerClient {
	return &bouncerClient{cc}
}

func (c *bouncerClient) Authorization(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/bouncer.Bouncer/Authorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bouncerClient) DropBucket(ctx context.Context, in *DropBucketParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bouncer.Bouncer/DropBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bouncerClient) AddBlackList(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bouncer.Bouncer/AddBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bouncerClient) RemoveBlackList(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bouncer.Bouncer/RemoveBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bouncerClient) AddWhiteList(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bouncer.Bouncer/AddWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bouncerClient) RemoveWhiteList(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bouncer.Bouncer/RemoveWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BouncerServer is the server API for Bouncer service.
type BouncerServer interface {
	Authorization(context.Context, *AuthRequest) (*AuthResponse, error)
	DropBucket(context.Context, *DropBucketParams) (*emptypb.Empty, error)
	AddBlackList(context.Context, *Subnet) (*emptypb.Empty, error)
	RemoveBlackList(context.Context, *Subnet) (*emptypb.Empty, error)
	AddWhiteList(context.Context, *Subnet) (*emptypb.Empty, error)
	RemoveWhiteList(context.Context, *Subnet) (*emptypb.Empty, error)
}

// UnimplementedBouncerServer can be embedded to have forward compatible implementations.
type UnimplementedBouncerServer struct {
}

func (*UnimplementedBouncerServer) Authorization(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorization not implemented")
}
func (*UnimplementedBouncerServer) DropBucket(context.Context, *DropBucketParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropBucket not implemented")
}
func (*UnimplementedBouncerServer) AddBlackList(context.Context, *Subnet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlackList not implemented")
}
func (*UnimplementedBouncerServer) RemoveBlackList(context.Context, *Subnet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlackList not implemented")
}
func (*UnimplementedBouncerServer) AddWhiteList(context.Context, *Subnet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWhiteList not implemented")
}
func (*UnimplementedBouncerServer) RemoveWhiteList(context.Context, *Subnet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWhiteList not implemented")
}

func RegisterBouncerServer(s *grpc.Server, srv BouncerServer) {
	s.RegisterService(&_Bouncer_serviceDesc, srv)
}

func _Bouncer_Authorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncerServer).Authorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bouncer.Bouncer/Authorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncerServer).Authorization(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bouncer_DropBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropBucketParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncerServer).DropBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bouncer.Bouncer/DropBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncerServer).DropBucket(ctx, req.(*DropBucketParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bouncer_AddBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subnet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncerServer).AddBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bouncer.Bouncer/AddBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncerServer).AddBlackList(ctx, req.(*Subnet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bouncer_RemoveBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subnet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncerServer).RemoveBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bouncer.Bouncer/RemoveBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncerServer).RemoveBlackList(ctx, req.(*Subnet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bouncer_AddWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subnet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncerServer).AddWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bouncer.Bouncer/AddWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncerServer).AddWhiteList(ctx, req.(*Subnet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bouncer_RemoveWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subnet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncerServer).RemoveWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bouncer.Bouncer/RemoveWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncerServer).RemoveWhiteList(ctx, req.(*Subnet))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bouncer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bouncer.Bouncer",
	HandlerType: (*BouncerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorization",
			Handler:    _Bouncer_Authorization_Handler,
		},
		{
			MethodName: "DropBucket",
			Handler:    _Bouncer_DropBucket_Handler,
		},
		{
			MethodName: "AddBlackList",
			Handler:    _Bouncer_AddBlackList_Handler,
		},
		{
			MethodName: "RemoveBlackList",
			Handler:    _Bouncer_RemoveBlackList_Handler,
		},
		{
			MethodName: "AddWhiteList",
			Handler:    _Bouncer_AddWhiteList_Handler,
		},
		{
			MethodName: "RemoveWhiteList",
			Handler:    _Bouncer_RemoveWhiteList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bouncer.proto",
}
